apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.antfortune.freeline'

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':jrhlibrary')
    compile('com.tencent.tinker:tinker-android-lib:1.7.3') { changing = true }
    provided('com.tencent.tinker:tinker-android-anno:1.7.3') { changing = true }
    compile 'com.jakewharton:butterknife:8.4.0'
    compile 'com.android.support:multidex:1.0.1'
    provided 'com.android.support:appcompat-v7:25.2.0'
    testCompile 'junit:junit:4.12'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.flaviofaria:kenburnsview:1.0.7'
    testCompile 'org.mockito:mockito-core:2.7.12'
    compile 'org.mockito:mockito-android:2.7.12'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
//    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.1'
    testCompile 'org.robolectric:robolectric:3.3.1'
    testCompile 'org.khronos:opengl-api:gl1.1-android-2.1_r1'

    compile 'com.trello.rxlifecycle2:rxlifecycle:2.0.1'

// If you want to bind to Android-specific lifecycles
    compile 'com.trello.rxlifecycle2:rxlifecycle-android:2.0.1'

// If you want pre-written Activities and Fragments you can subclass as providers
    compile 'com.trello.rxlifecycle2:rxlifecycle-components:2.0.1'

    androidTestCompile 'com.google.code.findbugs:jsr305:3.0.1'


}

def javaVersion = JavaVersion.VERSION_1_7

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    //recommend
    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        signingConfigs {
            release {
                keyAlias 'jiarh'
                keyPassword '123456'
                storeFile file('/Users/jiarh/project/android/JrhliveApplication/app/keystore/jrh.jks')
                storePassword '123456'
            }
            debug {
                storeFile file('./keystore/jrh.jks')
                storePassword "123456"
                keyAlias "jiarh"
                keyPassword "123456"
            }
        }
    }

    defaultConfig {
        applicationId "cn.jrhliveapplication"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0"
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary true
    }
    configurations.all {
        resolutionStrategy.force 'com.android.support:support-annotations:23.1.1'
        resolutionStrategy.force 'com.android.support:appcompat-v7:25.2.0'
//        resolutionStrategy.force 'com.android.support:recyclerview-v7:23.1.1'
//        resolutionStrategy.force 'com.android.support:support-v4:23.1.1'
//        resolutionStrategy.force 'com.android.support:appcompat-v7:23.1.1'
//        resolutionStrategy.force 'com.android.support:design:23.1.1'
    }
//    aaptOptions{
//        cruncherEnabled false
//    }

//    //use to test flavors support
//    productFlavors {
//        flavor1 {
//            applicationId 'tinker.sample.android.flavor1'
//        }
//
//        flavor2 {
//            applicationId 'tinker.sample.android.flavor2'
//        }
//    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/LGPL2.1'
    }
}


